#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bootstrap:server');
var http = require('http');
var bson = require('bson');
var db = require('../js/mongo');
var socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = socketio.listen(server);
io.sockets.on('connection', function (socket) {

  socket.on('message', function (data) {
    db.select('user', {_id: bson.ObjectId(data.user)}, {}, function (foo) {
      if (foo) {
          db.insert('chat_log', {
            user_id: bson.ObjectId(data.user),
            room_id: bson.ObjectId(data.room),
            message: data.message,
            send_date: new Date()
        }, function (data) {});
          io.sockets.emit('receive_message', {
            user: {id: data.user, name: foo[0].user_name},
            data: {id: data.room, message: data.message, date: new Date()}
          });
      }
    });
  });

socket.on('add_room', function (data) {
    console.log(data);
  db.select('user', {user_name: data.name}, {}, function (user) {
    if (user.length) {
        console.log(user);
      db.join('room_member', 'room', 'room_id', '_id', 'room', {user_id: bson.ObjectId(user[0]._id),room_id: bson.ObjectId(data.room)}, function (roomdata) {
      console.log(roomdata);
        if (roomdata.length) {
          io.sockets.emit('receive_room', {
            room: {id: roomdata[0].room_id, name: roomdata[0].room[0].room_name},
            user: {id: user[0]._id}
          });
        }
      });
    }
  });
});
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
